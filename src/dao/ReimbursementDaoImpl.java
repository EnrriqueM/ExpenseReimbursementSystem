package dao;

import java.io.ByteArrayInputStream;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import driver.ErsAppDriver;
import models.Reimbursement;
import models.ReimbursementStatus;
import models.ReimbursementType;
import models.User;
import utilities.ConnectionUtility;

public class ReimbursementDaoImpl implements ReimbursementDao {

	@Override
	public Reimbursement addReimbursement(Reimbursement r) {
		//amount, description, receipt, user_id, type
		String sql = "SELECT add_reimbursement(?, ?, ?, ?, ?)";

		//Get Singleton
		ConnectionUtility connUtil = ConnectionUtility.getConnectionUtil();

		//Get Connection
		Connection conn = connUtil.getConnection();

		try
		{
			CallableStatement cStmt = conn.prepareCall(sql);
			cStmt.setDouble(1, r.getAmount());
			cStmt.setString(2, r.getDescription());
			ByteArrayInputStream bis = null;
			int length = 0;
			if (r.getFile() != null)
			{
				bis = new ByteArrayInputStream(r.getFile());
				length = r.getFile().length;
			}
			cStmt.setBinaryStream(3, bis, length);
			cStmt.setInt(4, r.getAuthor_id());
			if(r.getType() == ReimbursementType.LODGING)
			{
				cStmt.setInt(5, 1);
			}
			else  if (r.getType() == ReimbursementType.TRAVEL)
			{
				cStmt.setInt(5, 2);
			}
			else  if (r.getType() == ReimbursementType.FOOD)
			{
				cStmt.setInt(5, 3);
			}
			else
			{
				cStmt.setInt(5, 4);
			}

			//Execute
			cStmt.execute();
			
			//Get the id generated by the database
			ResultSet rs = cStmt.getResultSet();
			
			if(rs.next())
			{
				Integer id = rs.getInt("add_reimbursement");
				r.setId(id);
			}
		}
		catch (SQLException e)
		{
			e.printStackTrace();
			
			ErsAppDriver.logger.warn(e.getMessage());
		}
		return r;
	}

	@Override
	public Reimbursement getReimbursement(Integer reimbId) {
		Reimbursement r = null;

		//Get Singleton
		ConnectionUtility connUtil = ConnectionUtility.getConnectionUtil();

		//Get Connection
		Connection conn = connUtil.getConnection();

		//Start query stmt
		String sql = "SELECT * FROM get_reimb_by_id(?)";

		try
		{
			PreparedStatement pstmt = conn.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
			pstmt.setInt(1, reimbId);

			ResultSet rs = pstmt.executeQuery();
			//If found, setup the user
			if(rs.first())
			{
				//Get
				double amount = rs.getDouble("Amount requested");
				LocalDateTime dateCreated = rs.getTimestamp("Date Submitted").toLocalDateTime();
				//Might be null, will throw NULLPOINTEREXCEPTION
				LocalDateTime dateResolved = rs.getTimestamp("Date Resolved") != null ? rs.getTimestamp("Date Resolved").toLocalDateTime() : null;
				String descr = rs.getString("description");
				Integer author_id = rs.getInt("Employee Id");
				String author_firstname = rs.getString("firstname");
				String author_lastname = rs.getString("lastname");
				//Might be null, will throw NULLPOINTEREXCEPTION
				Integer resolver_id = null;
				String res_firstname = null;
				String res_lastname = null;
				try
				{
					resolver_id = rs.getInt("Resolver Id");
					res_firstname = rs.getString("Resolver firstname");
					res_lastname = rs.getString("Resolver lastname");
				}
				catch(NullPointerException e)
				{
					
				} 
				
				String type = rs.getString("Type");
				String status = rs.getString("status");
				
				//ADD to reimb obj
				r = new Reimbursement();
				r.setId(reimbId);
				r.setAmount(amount);
				r.setDateCreated(dateCreated);
				r.setDateResolved(dateResolved);
				r.setDescription(descr);
				r.setAuthor_id(author_id);
				r.setAuthor_firstname(author_firstname);
				r.setAuthor_lastname(author_lastname);
				r.setResolver_id(resolver_id);
				r.setResolver_firstname(res_firstname);
				r.setResolver_lastname(res_lastname);
				//Determine the type
				if(type.equals("Lodging"))
				{
					r.setType(ReimbursementType.LODGING);
				}
				else if(type.equals("Food"))
				{
					r.setType(ReimbursementType.FOOD);
				}
				else if(type.equals("Travel"))
				{
					r.setType(ReimbursementType.TRAVEL);
				}
				else
				{
					r.setType(ReimbursementType.OTHER);
				}
				//Determine the status
				if(status.equals("Pending"))
				{
					r.setStatus(ReimbursementStatus.PENDING);
				}
				else if(status.equals("Approved"))
				{
					r.setStatus(ReimbursementStatus.APPROVED);
				}
				else
				{
					r.setStatus(ReimbursementStatus.DENIED);
				}
			}
		}
		catch (SQLException e)
		{
			e.printStackTrace();
			
			ErsAppDriver.logger.debug(e.getMessage());
		}

		return r;
	}

	@Override
	public List<Reimbursement> getReimbursements() {
		List<Reimbursement> allReimb = new ArrayList<Reimbursement>();
		
		//Get Singleton
		ConnectionUtility connUtil = ConnectionUtility.getConnectionUtil();

		//Get Connection
		Connection conn = connUtil.getConnection();

		//sql stmt
		String sql = "SELECT * from all_reimbursements";

		try
		{
			//Create a statement
			Statement stmt = conn.createStatement();
			//Execute query
			stmt.execute(sql);
			ResultSet rs = stmt.getResultSet();

			//Extract data
			while(rs.next())
			{
				//Get
				int id = rs.getInt("id");
				double amount = rs.getDouble("Amount requested");
				LocalDateTime dateCreated = rs.getTimestamp("Date Submitted").toLocalDateTime();
				//Might be null, will throw NULLPOINTEREXCEPTION
				LocalDateTime dateResolved = rs.getTimestamp("Date Resolved") != null ? rs.getTimestamp("Date Resolved").toLocalDateTime() : null;
				String descr = rs.getString("description");
				Integer author_id = rs.getInt("Employee Id");
				String author_firstname = rs.getString("firstname");
				String author_lastname = rs.getString("lastname");
				//Might be null, will throw NULLPOINTEREXCEPTION
				Integer resolver_id = null;
				String res_firstname = null;
				String res_lastname = null;
				try
				{
					resolver_id = rs.getInt("Resolver Id");
					res_firstname = rs.getString("Resolver firstname");
					res_lastname = rs.getString("Resolver lastname");
				}
				catch(NullPointerException e)
				{
					
				} 
				
				String type = rs.getString("Type");
				String status = rs.getString("status");
				
				//ADD to reimb obj
				Reimbursement r = new Reimbursement();
				r.setId(id);
				r.setAmount(amount);
				r.setDateCreated(dateCreated);
				r.setDateResolved(dateResolved);
				r.setDescription(descr);
				r.setAuthor_id(author_id);
				r.setAuthor_firstname(author_firstname);
				r.setAuthor_lastname(author_lastname);
				r.setResolver_id(resolver_id);
				r.setResolver_firstname(res_firstname);
				r.setResolver_lastname(res_lastname);
				//Determine the type
				if(type.equals("Lodging"))
				{
					r.setType(ReimbursementType.LODGING);
				}
				else if(type.equals("Food"))
				{
					r.setType(ReimbursementType.FOOD);
				}
				else if(type.equals("Travel"))
				{
					r.setType(ReimbursementType.TRAVEL);
				}
				else
				{
					r.setType(ReimbursementType.OTHER);
				}
				//Determine the status
				if(status.equals("Pending"))
				{
					r.setStatus(ReimbursementStatus.PENDING);
				}
				else if(status.equals("Approved"))
				{
					r.setStatus(ReimbursementStatus.APPROVED);
				}
				else
				{
					r.setStatus(ReimbursementStatus.DENIED);
				}
				//Add to list
				allReimb.add(r);
			}//End of While loop
		}
		catch (SQLException e)
		{
			e.printStackTrace();
			
			ErsAppDriver.logger.debug(e.getMessage());
		}
		
		return allReimb;
	}

	@Override
	public List<Reimbursement> getReimbursementsByUser(User u) {
		List<Reimbursement> usersReimb = new ArrayList<Reimbursement>();
		
		//Get Singleton
		ConnectionUtility connUtil = ConnectionUtility.getConnectionUtil();

		//Get Connection
		Connection conn = connUtil.getConnection();

		//sql stmt
		//user_id
		String sql = "SELECT * from get_reimb_by_user_id(?)";

		try
		{
			//Create a statement
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setInt(1, u.getId());
			
			//Execute query
			pStmt.execute();
			ResultSet rs = pStmt.getResultSet();

			//Extract data
			while(rs.next())
			{
				//Get
				int id = rs.getInt("id");
				double amount = rs.getDouble("Amount requested");
				LocalDateTime dateCreated = rs.getTimestamp("Date Submitted").toLocalDateTime();
				//Might be null, will throw NULLPOINTEREXCEPTION
				LocalDateTime dateResolved = rs.getTimestamp("Date Resolved") != null ? rs.getTimestamp("Date Resolved").toLocalDateTime() : null;
				String descr = rs.getString("description");
				Integer author_id = rs.getInt("Employee Id");
				String author_firstname = rs.getString("firstname");
				String author_lastname = rs.getString("lastname");
				//Might be null, will throw NULLPOINTEREXCEPTION
				Integer resolver_id = null;
				String res_firstname = null;
				String res_lastname = null;
				try
				{
					resolver_id = rs.getInt("Resolver Id");
					res_firstname = rs.getString("Resolver firstname");
					res_lastname = rs.getString("Resolver lastname");
				}
				catch(NullPointerException e)
				{
					ErsAppDriver.logger.debug(e.getMessage());
				} 
				
				String type = rs.getString("Type");
				String status = rs.getString("status");
				
				//ADD to reimb obj
				Reimbursement r = new Reimbursement();
				r.setId(id);
				r.setAmount(amount);
				r.setDateCreated(dateCreated);
				r.setDateResolved(dateResolved);
				r.setDescription(descr);
				r.setAuthor_id(author_id);
				r.setAuthor_firstname(author_firstname);
				r.setAuthor_lastname(author_lastname);
				r.setResolver_id(resolver_id);
				r.setResolver_firstname(res_firstname);
				r.setResolver_lastname(res_lastname);
				//Determine the type
				if(type.equals("Lodging"))
				{
					r.setType(ReimbursementType.LODGING);
				}
				else if(type.equals("Food"))
				{
					r.setType(ReimbursementType.FOOD);
				}
				else if(type.equals("Travel"))
				{
					r.setType(ReimbursementType.TRAVEL);
				}
				else
				{
					r.setType(ReimbursementType.OTHER);
				}
				//Determine the status
				if(status.equals("Pending"))
				{
					r.setStatus(ReimbursementStatus.PENDING);
				}
				else if(status.equals("Approved"))
				{
					r.setStatus(ReimbursementStatus.APPROVED);
				}
				else
				{
					r.setStatus(ReimbursementStatus.DENIED);
				}
				//Add to list
				usersReimb.add(r);
			}//End of While loop
		}
		catch (SQLException e)
		{
			e.printStackTrace();
			ErsAppDriver.logger.warn(e.getMessage());
		}
		
		return usersReimb;
	}

	@Override
	public Reimbursement updateReimbursement(Reimbursement r) {
		//Get Singleton
		ConnectionUtility connUtil = ConnectionUtility.getConnectionUtil();

		//Get Connection
		Connection conn = connUtil.getConnection();

		//Prepare sql statement
		//reimb_id, resolver_id, status
		String sql = "CALL update_reimbursement(?, ?, ?)";
		try
		{
			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, r.getId());
			pstmt.setInt(2, r.getResolver_id());
			if(r.getStatus().equals(ReimbursementStatus.APPROVED))
			{
				pstmt.setInt(3, 3);
			}
			else
			{
				pstmt.setInt(3, 2);
			}

			//Execute
			pstmt.execute();
		}
		catch (SQLException e)
		{
			e.printStackTrace();
			ErsAppDriver.logger.debug(e.getMessage());
		}
				
		return r;
	}

	@Override
	public boolean removeReimbursement(Reimbursement r) {
		boolean didRemoved = false;

		//Get Singleton
		ConnectionUtility connUtil = ConnectionUtility.getConnectionUtil();

		//Get Connection
		Connection conn = connUtil.getConnection();

		//sql stmt
		String sql = "CALL remove_reimbursement(?)";

		try
		{
			//Create a statement
			CallableStatement stmt = conn.prepareCall(sql);
			stmt.setInt(1, r.getId());
			//Execute query
			stmt.execute();
			didRemoved = true;
		}
		catch (SQLException e)
		{
			ErsAppDriver.logger.debug(e.getMessage());
			e.printStackTrace();
		}

		return didRemoved;
	}

}
