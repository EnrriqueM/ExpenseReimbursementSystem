package dao;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;


import driver.ErsAppDriver;
import models.User;
import models.UserType;
import utilities.ConnectionUtility;

public class UserDaoImpl implements UserDao {

	@Override
	public User addUser(User user) {
		// Get Singleton
		ConnectionUtility connUtil = ConnectionUtility.getConnectionUtil();
		
		//Get Connection
		Connection conn = connUtil.getConnection();
		
		//Start query stmt
		//1:fn ,2:ln, 3:un, 4:pwd, 5:email, 6:type
		String sql = "select * from add_user(?, ?, ?, ?, ?, ?)";
		try
		{
			CallableStatement cStmt = conn.prepareCall(sql);
			cStmt.setString(1, user.getFirstName());
			cStmt.setString(2, user.getLastName());
			if (user.getUserType() == UserType.EMPLOYEE)
			{
				cStmt.setInt(6, 1);
			}
			else
			{
				cStmt.setInt(6, 2);
			}
			cStmt.setString(3, user.getUsername());
			cStmt.setString(4, user.getPassword());
			cStmt.setString(5, user.getEmail());

			//Execute
			cStmt.execute();
			
			//Get the id generated by the database
			ResultSet rs = cStmt.getResultSet();
			
			if(rs.next())
			{
				Integer id = rs.getInt("add_user");
				user.setId(id);
			}
		}
		catch(SQLException e)
		{
			e.printStackTrace();
		}
		
		return user;
	}

	@Override
	public User getUser(Integer userId) {
		User user =  null;
		
		//Get Singleton
				ConnectionUtility connUtil = ConnectionUtility.getConnectionUtil();

				//Get Connection
				Connection conn = connUtil.getConnection();

				//Start query stmt
				String sql = "SELECT * FROM get_user_by_id(?)";

				try
				{
					PreparedStatement pstmt = conn.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
					pstmt.setInt(1, userId);
					//pstmt.execute();

					ResultSet rs = pstmt.executeQuery();
					//If found, setup the user
					if(rs.first())
					{
						user = new User();
						user.setId(userId);
						user.setFirstName(rs.getString("Firstname"));
						user.setLastName(rs.getString("Lastname"));
						user.setUsername(rs.getString("Username"));
						user.setPassword(rs.getString("Password"));
						user.setEmail(rs.getString("Email"));
						if(rs.getString("Role").equals("Employee"))
						{
							user.setUserType(UserType.EMPLOYEE);
						}
						else
						{
							user.setUserType(UserType.FINANCE_MANAGER);
						}
					}
				}
				catch (SQLException e)
				{
					e.printStackTrace();
				}
		
		return user;
	}

	@Override
	public User getUser(String username, String pass) {
		User user = null;

		//Get Singleton
		ConnectionUtility connUtil = ConnectionUtility.getConnectionUtil();

		//Get Connection
		Connection conn = connUtil.getConnection();

		String sql = "SELECT * from get_user_by_un(?)";
		try
		{
			PreparedStatement pstmt = conn.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
			pstmt.setString(1, username);
			pstmt.execute();

			ResultSet rs = pstmt.getResultSet();

			//If found, setup the user
			if(rs.first()) 
			{
				user = new User();
				user.setId(rs.getInt("User Id"));
				user.setFirstName(rs.getString("Firstname"));
				user.setLastName(rs.getString("Lastname"));
				user.setUsername(rs.getString("Username"));
				user.setPassword(rs.getString("Password"));
				user.setEmail(rs.getString("Email"));
				if(rs.getString("Role").equals("Employee"))
				{
					user.setUserType(UserType.EMPLOYEE);
				}
				else
				{
					user.setUserType(UserType.FINANCE_MANAGER);
				}
			}
		}
		catch (SQLException e)
		{
			e.printStackTrace();
			ErsAppDriver.logger.debug(e.getMessage());
		}

		return user;
	}

	@Override
	public List<User> getAllUsers() {
		List<User> allUsers = new ArrayList<User>();
		
		//Get Singleton
		ConnectionUtility connUtil = ConnectionUtility.getConnectionUtil();

		//Get Connection
		Connection conn = connUtil.getConnection();

		//sql stmt
		String sql = "SELECT * from all_users";

		try
		{
			//Create a statement
			Statement stmt = conn.createStatement();
			//Execute query
			stmt.execute(sql);
			ResultSet rs = stmt.getResultSet();


			//Extract data
			while(rs.next())
			{
				User user = new User();
				user.setId(rs.getInt("User Id"));
				user.setFirstName(rs.getString("Firstname"));
				user.setLastName(rs.getString("Lastname"));
				user.setUsername(rs.getString("Username"));
				user.setPassword(rs.getString("Password"));
				user.setEmail(rs.getString("Email"));
				if(rs.getString("Role").equals("Employee"))
				{
					user.setUserType(UserType.EMPLOYEE);
				}
				else
				{
					user.setUserType(UserType.FINANCE_MANAGER);
				}

				//Add to list
				allUsers.add(user);
			} //End of while loop
		}
		catch (SQLException e)
		{
			e.printStackTrace();
			ErsAppDriver.logger.debug(e.getMessage());
		}
		
		return allUsers;
	}

	@Override
	public User updateUser(User u) 
	{
		//Get Singleton
		ConnectionUtility connUtil = ConnectionUtility.getConnectionUtil();

		//Get Connection
		Connection conn = connUtil.getConnection();

		//Prepare sql stmt
		//firstname, lastname, email, un, pwd, id
		String sql = "call update_user(?, ?, ?, ?, ?, ?)";

		try
		{
			CallableStatement cs = conn.prepareCall(sql);
			cs.setString(1, u.getFirstName());
			cs.setString(2, u.getLastName());
			cs.setString(3, u.getEmail());
			cs.setString(4, u.getUsername());
			cs.setString(5, u.getPassword());
			cs.setInt(6, u.getId());

			//Execute
			cs.execute();
		}
		catch(SQLException e)
		{
			e.printStackTrace();
			ErsAppDriver.logger.debug(e.getMessage());
		}
				
		return u;
	}

	@Override
	public boolean removeUser(User u) {
		boolean success = false;

		//Get Singleton
		ConnectionUtility connUtil = ConnectionUtility.getConnectionUtil();

		//Get Connection
		Connection conn = connUtil.getConnection();

		//Prepare sql stmt
		String sql = "call remove_user(?)";

		try
		{
			CallableStatement cs = conn.prepareCall(sql);
			cs.setInt(1, u.getId());

			//Execute
			cs.execute();
			success = true;
		}
		catch(SQLException e)
		{
			e.printStackTrace();
			ErsAppDriver.logger.warn(e.getMessage());
		}

		return success;
	}

	@Override
	public User getUser(String email) {
		User user = null;

		//Get Singleton
		ConnectionUtility connUtil = ConnectionUtility.getConnectionUtil();

		//Get Connection
		Connection conn = connUtil.getConnection();

		String sql = "SELECT * FROM get_user_by_email(?)";
		try
		{
			PreparedStatement pstmt = conn.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
			pstmt.setString(1, email);
			pstmt.execute();

			ResultSet rs = pstmt.getResultSet();

			//If found, setup the user
			if(rs.first()) 
			{
				user = new User();
				user.setId(rs.getInt("User Id"));
				user.setFirstName(rs.getString("Firstname"));
				user.setLastName(rs.getString("Lastname"));
				user.setUsername(rs.getString("Username"));
				user.setPassword(rs.getString("Password"));
				user.setEmail(rs.getString("Email"));
				if(rs.getString("Role").equals("Employee"))
				{
					user.setUserType(UserType.EMPLOYEE);
				}
				else
				{
					user.setUserType(UserType.FINANCE_MANAGER);
				}
			}
		}
		catch (SQLException e)
		{
			ErsAppDriver.logger.debug(e.getMessage());
			e.printStackTrace();
		}

		return user;
	}

}
